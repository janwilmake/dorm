{
  "openfunctions": "1.0.0",
  "info": {
    "title": "dormroom",
    "version": "1.0.0-next.16",
    "description": "A database ORM for Cloudflare Workers that provides a simple interface for SQLite operations using Durable Objects"
  },
  "runtime": {
    "node": ">=16.0.0"
  },
  "functions": {
    "createClient": {
      "description": "Creates a client for interacting with DORM database",
      "exported": true,
      "async": true,
      "params": [
        {
          "name": "context",
          "description": "Configuration options for the database client",
          "required": true,
          "schema": {
            "type": "object",
            "properties": {
              "doNamespace": {
                "type": "object",
                "description": "Durable Object namespace for DORM"
              },
              "version": {
                "type": "string",
                "description": "Optional version identifier for the database"
              },
              "statements": {
                "type": "array",
                "description": "SQL statements to initialize the database schema",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "string",
                "description": "Optional name for the database instance"
              },
              "locationHint": {
                "type": "string",
                "description": "Optional location hint for Durable Object placement"
              },
              "mirrorName": {
                "type": "string",
                "description": "Optional name for the mirror database instance"
              },
              "ctx": {
                "type": "object",
                "description": "Optional execution context for background operations"
              },
              "mirrorLocationHint": {
                "type": "string",
                "description": "Optional location hint for mirror Durable Object placement"
              }
            },
            "required": ["doNamespace", "statements"]
          }
        }
      ],
      "result": {
        "description": "A DORM client instance",
        "schema": {
          "type": "object",
          "properties": {
            "exec": {
              "type": "function",
              "description": "Execute SQL queries with optional mirroring"
            },
            "middleware": {
              "type": "function",
              "description": "HTTP middleware for database access"
            },
            "getDatabaseSize": {
              "type": "function",
              "description": "Get the size of the main database"
            },
            "getMirrorDatabaseSize": {
              "type": "function",
              "description": "Get the size of the mirror database if configured"
            }
          }
        }
      },
      "examples": [
        {
          "name": "Create a basic client",
          "params": [
            {
              "name": "context",
              "value": {
                "doNamespace": "env.DORM",
                "statements": [
                  "CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT NOT NULL);"
                ],
                "name": "my-app"
              }
            }
          ],
          "result": "A DORM client instance with exec, middleware, and other methods"
        }
      ]
    },
    "exec": {
      "description": "Execute SQL query in the database with optional parameters",
      "returnedFrom": ["createClient"],
      "async": false,
      "params": [
        {
          "name": "sql",
          "description": "SQL query string to execute",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "params",
          "description": "Parameters for the SQL query",
          "required": false,
          "schema": {
            "type": "array",
            "items": {
              "type": ["string", "number", "boolean", "null"]
            }
          }
        }
      ],
      "result": {
        "description": "A SQL storage cursor for iterating over the results",
        "schema": {
          "type": "object",
          "properties": {
            "toArray": {
              "type": "function",
              "description": "Collect all results into an array"
            },
            "raw": {
              "type": "function",
              "description": "Access raw results data"
            },
            "columnNames": {
              "type": "array",
              "description": "Names of columns in the result set"
            },
            "rowsRead": {
              "type": "integer",
              "description": "Number of rows read"
            },
            "rowsWritten": {
              "type": "integer",
              "description": "Number of rows written/affected"
            }
          }
        }
      },
      "examples": [
        {
          "name": "Simple query",
          "params": [
            {
              "name": "sql",
              "value": "SELECT * FROM users WHERE age > ?"
            },
            {
              "name": "params",
              "value": [21]
            }
          ]
        }
      ]
    },
    "middleware": {
      "description": "HTTP middleware for handling database requests",
      "returnedFrom": ["createClient"],
      "async": true,
      "params": [
        {
          "name": "request",
          "description": "The HTTP request object",
          "required": true,
          "schema": {
            "type": "object"
          }
        },
        {
          "name": "options",
          "description": "Middleware configuration options",
          "required": false,
          "schema": {
            "type": "object",
            "properties": {
              "secret": {
                "type": "string",
                "description": "Secret key for authenticating requests"
              },
              "prefix": {
                "type": "string",
                "description": "URL prefix for database routes"
              }
            }
          }
        }
      ],
      "result": {
        "description": "HTTP response or undefined if the middleware doesn't handle the request",
        "schema": {
          "type": ["object", "null"]
        }
      }
    },
    "getDatabaseSize": {
      "description": "Get the size of the main database in bytes",
      "returnedFrom": ["createClient"],
      "async": true,
      "result": {
        "description": "Database size in bytes",
        "schema": {
          "type": "number"
        }
      }
    },
    "getMirrorDatabaseSize": {
      "description": "Get the size of the mirror database in bytes if configured",
      "returnedFrom": ["createClient"],
      "async": true,
      "result": {
        "description": "Mirror database size in bytes or undefined if not configured",
        "schema": {
          "type": ["number", "null"]
        }
      }
    },
    "jsonSchemaToSql": {
      "description": "Converts a JSON Schema table definition to SQL statements",
      "exported": true,
      "params": [
        {
          "name": "schema",
          "description": "JSON Schema table definition",
          "required": true,
          "schema": {
            "type": "object",
            "properties": {
              "$id": {
                "type": "string",
                "description": "Table name"
              },
              "title": {
                "type": "string",
                "description": "Optional table title"
              },
              "description": {
                "type": "string",
                "description": "Optional table description"
              },
              "type": {
                "type": "string",
                "description": "Schema type (should be 'object')"
              },
              "properties": {
                "type": "object",
                "description": "Column definitions"
              },
              "required": {
                "type": "array",
                "description": "Required columns"
              }
            },
            "required": ["$id", "type", "properties"]
          }
        }
      ],
      "result": {
        "description": "Array of SQL statements for creating the table and indexes",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "JSONSchema": {
        "type": "object",
        "description": "Simple JSON Schema definition with SQLite extensions",
        "properties": {
          "type": {
            "type": ["string", "array"],
            "description": "JSON Schema type"
          },
          "properties": {
            "type": "object",
            "description": "Properties for object types"
          },
          "required": {
            "type": "array",
            "description": "Required properties"
          },
          "format": {
            "type": "string",
            "description": "Format specifier"
          },
          "enum": {
            "type": "array",
            "description": "Enumeration of allowed values"
          },
          "x-dorm-primary-key": {
            "type": "boolean",
            "description": "Marks the column as a primary key"
          },
          "x-dorm-auto-increment": {
            "type": "boolean",
            "description": "Enables autoincrement for primary key columns"
          },
          "x-dorm-index": {
            "type": ["boolean", "string"],
            "description": "Creates an index on the column"
          },
          "x-dorm-unique": {
            "type": "boolean",
            "description": "Creates a unique constraint on the column"
          },
          "x-dorm-references": {
            "type": "object",
            "description": "Foreign key reference specification",
            "properties": {
              "table": {
                "type": "string",
                "description": "Referenced table"
              },
              "column": {
                "type": "string",
                "description": "Referenced column"
              },
              "onDelete": {
                "type": "string",
                "description": "ON DELETE action",
                "enum": ["CASCADE", "SET NULL", "RESTRICT"]
              },
              "onUpdate": {
                "type": "string",
                "description": "ON UPDATE action",
                "enum": ["CASCADE", "SET NULL", "RESTRICT"]
              }
            }
          }
        }
      },
      "TableSchema": {
        "type": "object",
        "description": "JSON Schema definition for a database table",
        "properties": {
          "$id": {
            "type": "string",
            "description": "Table name"
          },
          "title": {
            "type": "string",
            "description": "Optional table title"
          },
          "description": {
            "type": "string",
            "description": "Optional table description"
          },
          "type": {
            "type": "string",
            "description": "Schema type (should be 'object')"
          },
          "properties": {
            "type": "object",
            "description": "Column definitions mapped by column name"
          },
          "required": {
            "type": "array",
            "description": "Array of required column names"
          }
        },
        "required": ["$id", "type", "properties"]
      },
      "MiddlewareOptions": {
        "type": "object",
        "description": "Configuration options for the DORM middleware",
        "properties": {
          "secret": {
            "type": "string",
            "description": "Secret key for authenticating requests"
          },
          "prefix": {
            "type": "string",
            "description": "URL prefix for database routes"
          }
        }
      },
      "DORMClient": {
        "type": "object",
        "description": "DORM client interface returned by createClient",
        "properties": {
          "exec": {
            "type": "function",
            "description": "Execute SQL queries with optional mirroring"
          },
          "middleware": {
            "type": "function",
            "description": "HTTP middleware for database access"
          },
          "getDatabaseSize": {
            "type": "function",
            "description": "Get the size of the main database"
          },
          "getMirrorDatabaseSize": {
            "type": "function",
            "description": "Get the size of the mirror database if configured"
          }
        }
      }
    }
  }
}
